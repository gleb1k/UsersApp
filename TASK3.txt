1. Предлагаю добавить в приложение Dependency Injection (DI).
Это упростит тестирование, обеспечит более гибкую архитектуру, повысит читаемость и переиспользуемость кода.
Также добавление DI исправит нарушение первого принципа SOLID'a (Single Responsibility)
Минусы: придется писать больше кода

Буду реализовывать это улучшение, напишу свой кастомный DI

2. DelegateAdapter для RecyclerView, учитывая, что будущем планируется добавление нового типа пользователей - сообщества.
Использование DelegateAdapter позволит легко расширять функциональность RecyclerView, обеспечивая разделение логики обработки элементов интерфейса на различные делегаты.
Это ускорит разработку экранов, где в одном RecyclerView могут быть разные ViewHolder'ы

3. Архитектура:
    1) Добавить разделение на core (network, database, navigation, utils, mvi) и feature (usersList, detail) модули.
    2) Добавить data, domain, ui слои, а также свою модель данных для каждого слоя.
       Сейчас модель которая приходит с сервера отображается на UI, а это плохо, ведь если нужно будет изменить
       ui то придеться менять data модель
    3) Покрыть все классы интерфейсами (скорее относиться к DI). Это упростит тестирование